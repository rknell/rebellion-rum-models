---
description: rules to follow when doing json serialization
globs: *.dart
---
# JSON Serialization Rules

## Overview
These rules define the standard practices for JSON serialization in the Rebellion Rum Models package.
Following these guidelines ensures consistent, robust serialization behavior across all models.

## Build Runner

### Required Step After Model Changes
- After creating or modifying any JSON serializable model, you MUST run the build_runner to generate the `.g.dart` files
- This step is required before considering any model modification task complete
- Run the build_runner using: `dart run build_runner build --delete-conflicting-outputs`
- Always check for build errors or warnings and address them before committing changes

### Required Analysis After Build Runner
- After running the build_runner, always run `dart analyze` to check for any issues
- Fix any analyzer warnings or errors before considering the task complete
- Common issues include:
  - Missing imports in generated files
  - Type mismatches between declared types and serialized types
  - Nullable/non-nullable type issues
- This verification step helps catch issues early and ensures code quality

## Model Registration

### Export New Models
- All newly created models MUST be exported in the `lib/rebellion_rum_models.dart` file
- Add an export statement for each new model file in the Models section
- Example: `export 'src/models/your_new_model.dart';`
- This ensures the model is available to consumers of the package
- This step is required before considering any new model implementation complete

## Enum Serialization

### Required Annotations
- All enum fields MUST include both `defaultValue` and `unknownEnumValue` in their `@JsonKey` annotation
- The `unknownEnumValue` should typically match the `defaultValue`
- Choose a sensible default that won't cause issues if encountered unexpectedly

### Example Implementation
```dart
enum Status { active, inactive, pending }

@JsonSerializable()
class MyModel {
  @JsonKey(
    defaultValue: Status.inactive,
    unknownEnumValue: Status.inactive
  )
  Status status;
}
```

## Never use explicit JsonKey(name: ) when the field name is the same
Do not repeat the JsonKey(name: <fieldName>) when the field name is the same, this is double handling and will cause issues if someone changes something and forgets. if the field name is different to that in the database (for example _id and id) then this is required.

### Enum Best Practices
- Always provide a safe fallback value for unknown enum values
- Document why a particular default was chosen
- Consider the implications of the default value on business logic
- Test serialization with invalid/unknown enum values

## Version Migration

### Handling Deprecated Values
- When removing enum values, update `unknownEnumValue` to handle old data
- Document the migration path in the model class
- Add tests to verify proper handling of deprecated values

### Example Migration
```dart
/// Status of an order
/// Note: 'pending' status was deprecated in v2.0.0
/// All 'pending' values will be mapped to 'inactive'
enum OrderStatus {
  active,
  inactive
}

@JsonSerializable()
class Order {
  @JsonKey(
    defaultValue: OrderStatus.inactive,
    unknownEnumValue: OrderStatus.inactive  // Handles old 'pending' values
  )
  OrderStatus status;
}
```

## Testing Requirements

### Required Test Cases
- Test serialization with all valid enum values
- Test deserialization with unknown/invalid values
- Verify default value behavior
- Test migration paths for deprecated values

### Example Test
```dart
test('should handle unknown enum values', () {
  final json = {'status': 'invalid_value'};
  final model = MyModel.fromJson(json);
  expect(model.status, equals(Status.inactive));
});
```

## Code Review Checklist

### Enum Serialization Review
- [ ] `@JsonKey` includes both `defaultValue` and `unknownEnumValue`
- [ ] Default value is appropriate for the business context
- [ ] Migration strategy is documented for enum changes
- [ ] Tests cover invalid value handling
- [ ] Documentation explains default value choice

## Documentation

### Required Documentation
- Document the purpose of each enum
- Explain the choice of default values
- Document any migration considerations
- Include examples of serialization behavior

### Example Documentation
```dart
/// Status of a sale in the system
/// Default is 'unpaid' to ensure conservative handling of payment state
/// Unknown values are treated as 'unpaid' for safety
enum SaleStatus {
  paid,
  unpaid
}
``` 

Besides json serialization, you also need to accomodate database serialisation as per [toDatabase.md](mdc:distillery_manager/.cursorrules/toDatabase.md)

